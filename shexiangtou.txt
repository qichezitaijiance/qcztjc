 * @file       main.c
 * @brief      山外K60 平台主程序
 * @author     山外科技
 * @version    v5.0
 * @date       2018-04-22
 */ling

#include "common.h"aa
#include "include.h"
   
/*****************舵机、电机相应pid和接口参数宏定义在"common.h"中*******************/
/*****************自己写的函数放在"customis.h"中**********************************/
/*****************记得将新建的文件添加入"include.h"中*****************************/


//LCD图像参数
Site_t site     = {0, 0};                           //显示图像左上角位置
Size_t imgsize  = {CAMERA_W, CAMERA_H};             //图像大小
Size_t size;                   //显示区域图像大小

//图像参数
uint8 imgbuff[CAMERA_SIZE];                 //定义存储接收图像的数组
uint8 img[CAMERA_H][CAMERA_W];              //图像数组
uint8 left_edge;                            //图像左边界
uint8 right_edge;                           //图像右边界


/*
 * 存放解压完的图像
 * img_data[0][0]是最下面一行最左边，img_data[59][79]是最上面最右边
*/
uint8 img_data[IMG_ROWS][IMG_COLS];         
int DMA_Over_Flag = 0;//采集图像成功标志位


//函数声明
void PORTA_IRQHandler();
void DMA0_IRQHandler();


/*!
 *  @brief      main函数
 *  @since      v5.0
 *  @note       山外摄像头 LCD 测试实验
 */

//自己添加的函数放在customise里面
void  main(void)
{
    int error;
    uint16 server_duty = 0;//舵机占空比
    uint16 motor1_duty = 0;//电机占空比
    uint16 motor2_duty = 0;//电机占空比
    uint16 motor3_duty = 0;//电机占空比
    uint16 motor4_duty = 0;//电机占空比
    //所有初始化
    all_init();
    
    
    //配置中断服务函数
    set_vector_handler(PORTA_VECTORn , PORTA_IRQHandler);   //设置 PORTA 的中断服务函数为 PORTA_IRQHandler
    set_vector_handler(DMA0_VECTORn , DMA0_IRQHandler);     //设置 DMA0 的中断服务函数为 PORTA_IRQHandler
    
    while(1)
    {
        /******************** 开启摄像头并解压 ***********************/
        camera_get_img(&DMA_Over_Flag);            //黑白摄像头,摄像头获取图像   
        img_extract((uint8 *)img_data,(uint8 *) imgbuff, CAMERA_H*CAMERA_W/8);//解压成灰度图像并以二维数组存放到img_data,处理图像时直接处理该数组   
       
        
        
        for(int i = 5; i < IMG_COLS - 5; i++)
        {
          if(img_data[40][IMG_COLS] == 0){
            left_edge = i;
            break;
          }
        }
        for(int j = IMG_COLS - 5; j > 5; j--)
        {
          if(img_data[40][IMG_COLS] == 0){
            right_edge = j;
            break;
          }
        }
        
        if(right_edge - left_edge > 0){
          error = (right_edge + left_edge)/2 - img_center;
        }
        
        server_duty = server_mid + error*server_kp;
        
        if(server_duty < server_min) server_duty = server_min;
        if(server_duty > server_max) server_duty = server_max;
        
        ftm_pwm_duty(FTM3, server_port, server_duty);
        
        
        
        /******************** lcd ***********************/
        LCD_Img_Binary_Z(site, size, imgbuff, imgsize);

        
        /******************** 发送图像到上位机 ***********************/
        //img_send(0, img_data);//发送到上位机
    }
}



/*!
 *  @brief      PORTA中断服务函数
 *  @since      v5.0
 */
void PORTA_IRQHandler()
{
    uint8  n;    //引脚号
    uint32 flag;

    while(!PORTA_ISFR);
    flag = PORTA_ISFR;
    PORTA_ISFR  = ~0;                                   //清中断标志位

    n = 29;                                             //场中断
    if(flag & (1 << n))                                 //PTA29触发中断
    {
        camera_vsync();
    }
#if ( CAMERA_USE_HREF == 1 )                            //使用行中断
    n = 28;
    if(flag & (1 << n))                                 //PTA28触发中断
    {
        camera_href();
    }
#endif


}

/*!
 *  @brief      DMA0中断服务函数
 *  @since      v5.0
 */
void DMA0_IRQHandler()
{
    camera_dma();
}

